version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys: 
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run: 
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run: 
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies{{ checksum "requirements.txt" }}

  run-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: build and upload docker image
          command: |
            docker build -t uda-capstone .
            docker run -d -p 8000:80 uda-capstone
            docker login -u nikhilsarecha -p $DOCKERHUB_PASSWORD
            docker tag uda-capstone nikhilsarecha/uda-capstone:latest
            docker push nikhilsarecha/uda-capstone:latest

  create-eks-cluster:
    executor: aws-eks/python3 
    steps:
      - checkout
      - run:
          name: eksctl setup
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
      - aws-eks/create-cluster:
          cluster-name: uda-capstone-cluster
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.micro
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  deploy-app:
    executor: aws-eks/python3 
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: uda-capstone-cluster
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/uda-capstone-deployment
  
  test-app:
    executor: aws-eks/python3
    steps:
      - aws-eks/update-kubeconfig-with-authenticator: 
          cluster-name: uda-capstone-cluster
          install-kubectl: true
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            kubectl get deployments
      #- run:
      #    name: initiate rolling update
      #    command: kubectl rollout restart deployment uda-capstone-deployment
      #- run: kubectl get svc uda-capstone-deployment
  
  rolling-update:
    executor: aws-eks/python3
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: uda-capstone-cluster
          install-kubectl: true
      - run:
          name: initiate rolling deploymnt
          command: kubectl rollout restart deployment uda-capstone-deployment

workflows:
  default:
    jobs:
      - build 
      - run-docker:
          requires:
            - build 
      - create-eks-cluster:
          requires:
            - run-docker  
      - deploy-app:
          requires:
            - create-eks-cluster 
      #      - run-docker
      - test-app:
          requires:
            - deploy-app 
      - rolling-update:
          requires:
            - test-app 